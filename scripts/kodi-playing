#!/bin/bash

# Purpose:  show notification what song Kodi is playing.
# Depends:  curl, jq
# Files:    $HOME/.kodi-playing
# Usage:    kodi-playing -h
#           Without arguments or with -t: add &:
#           kodi-playing &
# Author:   Arjen Balfoort, 28-12-2020

# Paths
LOCDIR="$HOME/.kodi-playing"
CONF="$LOCDIR/settings.conf"
LOG="$LOCDIR/kodi-playing.csv"
TMPTHUMB="/tmp/kodi-playing.png"
AUTOSTARTDT="$HOME/.config/autostart/kodi-playing.desktop"

# Create local directory
mkdir -p "$LOCDIR"
# Create conf file if it does not already exist
if [ ! -f "$CONF" ]; then
   cat > "$CONF" <<EOF
KODIADDRESS="kodi"      # Kodi name/IP address
KODIPORT="8080"         # Kodi port (default: 8080)
WAIT=10                 # Wait nr seconds for next Kodi check
SKIPTITLES="NPO"        # Skip title with one of these patterns (space seperated)
AUTOSTART=0             # Autostart on login (0=no, 1=yes)
EOF
    # Let the user configure the settings
    xdg-open "$CONF"
    # Get pid and wait until finished before continuing
    tail --pid=$(pgrep -f "$CONF") -f /dev/null 2>/dev/null
fi

# Source the configuration file
source "$CONF"

# Check if configured for autostart
if [ "$AUTOSTART" -eq 1 ]; then
    if [ ! -e "$AUTOSTARTDT" ]; then
        cat > "$AUTOSTARTDT" <<EOF
[Desktop Entry]
Name=Autostart kodi-playing
Exec=kodi-playing -t
StartupNotify=false
Terminal=false
Type=Application
EOF
    fi
else
    rm -f "$AUTOSTARTDT"
fi

# Function to show song information
function show_song_info() {
    CSVDATA=$(tail -n $1 "$LOG" | head -n 1 | tr -d '"')
    if [ ! -z "$CSVDATA" ]; then
        IFS=';' read -ra ARR <<< "$CSVDATA"
        if [ ! -z "${ARR[2]}" ]; then
            ALBUMSTR="<br>Album: ${ARR[2]}"
        fi
        if [ "${ARR[3]}" != "00:00" ]; then
            DURATIONSTR="<br>Duration: ${ARR[3]}"
        fi
        if [ ! -z "${ARR[4]}" ]; then
            # Check with previous song before downloading thumbnail
            CSVDATAPREV=$(tail -n $(($1+1)) "$LOG" | head -n 1 | tr -d '"')
            IFS=';' read -ra ARRPREV <<< "$CSVDATAPREV"
            if [ "${ARR[4]}" != "${ARRPREV[4]}" ] || [ ! -f "$TMPTHUMB" ]; then
                curl --silent "${ARR[4]}" -o "$TMPTHUMB"
            fi
        fi
        # Show notification
        notify-send -t 10000 -a "$KODIADDRESS:$KODIPORT" -i "$TMPTHUMB" "${ARR[0]}" "Artist: ${ARR[1]}${ALBUMSTR}${DURATIONSTR}"
        echo "${ARR[0]}, Artist: ${ARR[1]}${ALBUMSTR}${DURATIONSTR}" | sed 's/<br>/, /g'
    fi
}

# Function to get JSON song data from Kodi
JSON=""
function get_song() {
    JSON=$(curl --silent --data-binary '{"jsonrpc": "2.0", "method": "Player.GetItem", "params": { "properties": ["title", "album", "artist", "duration", "thumbnail"], "playerid": 0 }, "id": "AudioGetItem"}' -H 'content-type: application/json;' http://$KODIADDRESS:$KODIPORT/jsonrpc)
}

function usage() {
    printf "kodi-playing Help
Usage: kodi-playing [OPTION]

-c                      Show current song
-i [#]                  Show song by number: 1=last, 2=previous,etc.
-h                      This help screen
-l                      Show log file
-q                      Quit kodi-playing
-s                      Edit settings.conf
-t                      Start tray icon
"
}

# Get parameters
while getopts 'chi:lqst' OPT; do
    case $OPT in
        c)
            show_song_info 1
            rm -f "$TMPTHUMB"
            exit 0
            ;;
        h)
            usage
            exit 0
            ;;
        i)
            show_song_info $OPTARG
            rm -f "$TMPTHUMB"
            exit 0
            ;;
        l)
            xdg-open "$LOG"
            exit 0
            ;;
        q)
            # Quitt kodi-playing
            killall kodi-playing
            exit 0
            ;;
        s)
            # Edit settings
            xdg-open "$CONF"
            exit 0
            ;;
        t)
            # Start system tray icon
            PID=$(ps a | grep  "import_module('kodi-playing')" | grep -v 'grep' | awk '{print $1}')
            if [ -z "$PID" ]; then
                python3 -OO -c "import importlib; kp = importlib.import_module('kodi-playing'); kp.main();" 2>/dev/null &
            fi
            ;;
        \?|:)
            usage
            exit 1
            ;;
        *)
            ;;
    esac
done

# Only run this script once
for PID in $(pidof -x kodi-playing); do
    if [ $PID != $$ ]; then
        echo "kodi-playing is already running with PID $PID"
        exit 1
    fi
done

# Initiate log file (semicolon seperated csv)
echo -n "" > "$LOG"
# Initiate variables
PREVTITLE=""
while true; do
    # Get json data from Kodi
    get_song
    while [ -z "$JSON" ]; do
        # Kodi not running - keep checking
        get_song
        sleep 60
    done
    
    # Reset variables
    TITLE=""
    ARTIST=""
    ALBUM=""
    DURATION=""

    # Retrieve the title first
    TITLE=$(echo $JSON | jq -r '.result.item.title')
    
    # Check if we need to skip this title
    SKIP=false
    for PATTERN in $SKIPTITLES; do
        if [[ "$TITLE" == *$PATTERN* ]]; then
            SKIP=true
        fi
    done
    
    if ! $SKIP && [ ! -z "$TITLE" ] && [ "$TITLE" != "$PREVTITLE" ]; then
        # .artist returns an array: use jq [] and bash () to handle it as an array in bash
        ARTIST=($(echo $JSON | jq -r '.result.item.artist[]'))
        ALBUM=$(echo $JSON | jq -r '.result.item.album' | tr '"' "'" 2>/dev/null)
        
        # Duration is returned is seconds
        DURATION=$(echo $JSON | jq -r '.result.item.duration' 2>/dev/null)
        # Convert to "00:00" notation
        DURATION=$(date -d@$DURATION -u +%M:%S 2>/dev/null)
        
        # Retrieve thumbnail path
        THUMBNAIL=$(echo $JSON | jq -r '.result.item.thumbnail' 2>/dev/null)
        if [ ! -z "$THUMBNAIL" ]; then
            # To get the full encrypted path we need to use Kodi's Files.PrepareDownload function
            JSONTHUMB=$(curl --silent --data-binary '{"jsonrpc": "2.0", "params": {"path": "'$THUMBNAIL'"}, "method": "Files.PrepareDownload", "id": "preparedl"}' -H 'content-type:application/json' http://$KODIADDRESS:$KODIPORT/jsonrpc)
            THUMBNAILPATH="http://$KODIADDRESS:$KODIPORT/$(echo $JSONTHUMB | jq -r '.result.details.path' 2>/dev/null)"
        fi
        
        # Title and Artist information
        if [ "${#ARTIST[@]}" -gt 0 ]; then
            ARTISTSTR=$(echo ${ARTIST[0]} | tr '"' "'")
            TITLESTR=$(echo $TITLE | tr '"' "'")
        else
            # Radio plugin title: split on ' - '
            PATTERN=' - '
            ARTISTSTR=$(echo ${TITLE%*$PATTERN*} | tr '"' "'")
            TITLESTR=$(echo ${TITLE#*$PATTERN} | tr '"' "'")
        fi
        
        if [ "$TITLESTR" != "$ARTISTSTR" ]; then
            # Logging
            echo
            echo "\"$TITLESTR\";\"$ARTISTSTR\";\"$ALBUM\";\"$DURATION\";\"$THUMBNAILPATH\"" >> "$LOG"
            # Send notification
            show_song_info 1
        fi
        
        # Save the title for the next loop
        PREVTITLE=$TITLE
    fi

    # Wait until we continue with the loop
    sleep $WAIT
done
